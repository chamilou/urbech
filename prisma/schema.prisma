// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  name             String
  email            String     @unique
  password         String
  addressId        String?
  address          Address?   @relation(fields: [addressId], references: [id])
  refreshToken     String?
  role             Role       @default(USER)
  createdAt        DateTime   @default(now())
  verificationCode String?
  isVerified       Boolean    @default(false)
  orders           Order[]
  Customer         Customer[]
  passwordResetTokens PasswordResetToken[]
  passwordChangedAt DateTime?
  wishlistItems Product[] @relation("UserWishlist")

  @@map("users")
}
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
model Address {
  id    String  @id @default(uuid())
  label String? // Optional: "Shipping", "Billing", "HQ"

  street    String
  city      String
  state     String?
  zip       String?
  country   String
  createdAt DateTime @default(now())

  // Relations (optional/nullable for flexibility)

  orders   Order[] // Shipping destination
  products Product[]  @relation("OriginLocation") // e.g. product origin
  User     User[]
  Customer Customer[]
  Partner  Partner[]

  @@map("addresses")
}

model Product {
  id              String         @id @default(uuid())
  name            String
  price           Float
  description     String?
  stock           Int            @default(0)
  minStock        Int            @default(5)
  isLowStock      Boolean        @default(false)
  pricePerUnit    Float?
  articleNumber   String? // internal SKU
  isTopProduct    Boolean        @default(false)
  isNewProduct    Boolean        @default(true)
  originAddressId String?
  originAddress   Address?       @relation("OriginLocation", fields: [originAddressId], references: [id])
  weight          Float? // in grams (more precise than kg for small items)
  length          Float? // in cm
  width           Float? // in cm
  height          Float? // in cm
  color           String? // primary color
  mainImage       String?        @default("") // URL to main product image (now required)
  images          ProductImage[] // Additional images
  categoryId      String?
  category        Category?      @relation(fields: [categoryId], references: [id])
  createdAt       DateTime       @default(now())
  orderItems      OrderItem[]
   wishlistedBy User[] @relation("UserWishlist")

  @@map("products")
}

// New model for additional product images
model ProductImage {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  url       String // Image URL
  altText   String? // Accessibility description
  isPrimary Boolean @default(false)
  order     Int // For sorting images in gallery

  @@map("product_images")
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  parentId  String? // Optional, used for subcategories
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")
  products  Product[] // A category can have many products
  createdAt DateTime   @default(now())

  @@map("categories")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  group     String? // e.g., "Retail", "Wholesale", "VIP"
  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])
  city      String?
  country   String?
  orders    Order[] // Relation to orders
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("customers")
}

model Partner {
  id          String      @id @default(uuid())
  name        String
  type        PartnerType
  contactName String?
  phone       String?
  email       String?
  addressId   String?
  address     Address?    @relation(fields: [addressId], references: [id])
  orders      Order[] // Orders handled by this partner
  createdAt   DateTime    @default(now())

   //PDF/Invoice config fields
   
  headerTitle     String? // e.g. "Acme Inc. Invoice"
  footerNote      String?
  bankDetails     String?
  contactInfo     String?
  logoUrl         String?
  paymentTerms    String?
  returnPolicy    String?

  @@map("partners")
}

enum PartnerType {
  SUPPLIER
  DELIVERY
  PICKUP_POINT
}

model Order {
  id            String        @id @default(uuid())
  orderNumber   String        @unique
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  partnerId     String?
  partner       Partner?      @relation(fields: [partnerId], references: [id])
  total         Float
  addressId     String?
  address       Address?      @relation(fields: [addressId], references: [id])
  city          String?
  location      String?
  paymentMode   String?
  status        OrderStatus   @default(PROCESSING)
  paymentStatus PaymentStatus @default(PENDING)
  sendingAgent  String?
  items         OrderItem[]
  createdAt     DateTime      @default(now())
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?

  @@map("orders")
}

enum OrderStatus {
  PROCESSING
  PAID
  SENT
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}
